---
title: "Immune Deconvolution"
author: "Harvard Chan Bioinformatics Core"
date: "`r Sys.Date()`"
format:
  html:
    code-fold: true
    code-tools: true
    code-overflow: wrap
    df-print: paged
    highlight-style: pygments
    number-sections: true
    self-contained: true
    theme: default
    toc: true
    toc-location: right
    toc-expand: false
    lightbox: true
params:
  # information about project: project name, PI, analyst, experiment, aim
  project_file: ../information.R
  # paths to raw counts and TPM gene expression matrices and metadata table
  params_file: params_immune_deconv_human.R
  # metadata to separate by on plot
  factor_of_interest_1: sample_type
  factor_of_interest_1_levels: !expr c("tumor", "normal")
  factor_of_interest_2: null
  factor_of_interest_2_levels: null
  # for TIMER method: which cancer type?
  # run `immunedeconv::timer_available_cancers` to see options
  # or see publication https://doi.org/10.1186/s13059-016-1028-7 for definitions
  cancer_type: coad
---

Template developed with materials from the [Immune deconvolution vignette from immunedeconv](https://omnideconv.org/immunedeconv/articles/immunedeconv.html) and the [Immune infiltration tutorial from DFCI](https://liulab-dfci.github.io/RIMA/Infiltration.html).

```{r check_wd_and_version}
# this sets up the working directory to this file so all files can be found
suppressWarnings(library(rstudioapi))
# NOTE: this code will check version, this is our recommendation, it may work with other versions
stopifnot(R.version$major >= 4) # requires R4
if (compareVersion(R.version$minor, "3.1") < 0) warning("We recommend >= R4.3.1")
stopifnot(compareVersion(as.character(BiocManager::version()), "3.18") >= 0)
```

This code is in this ![](https://img.shields.io/badge/status-draft-grey) revision.

```{r load_params}
#| cache: FALSE
invisible(list2env(params, environment()))
source(params_file)
source(project_file)
```

```{r load_libraries}
#| cache: FALSE
#| message: FALSE
#| warning: FALSE
library(tidyverse)
library(knitr)
# BiocManager::install('grimbough/biomaRt')
library(biomaRt)
# remotes::install_github("omnideconv/immunedeconv")
library(immunedeconv)
library(DT)

opts_chunk[["set"]](
  cache = FALSE,
  cache.lazy = FALSE,
  dev = c("png", "pdf"),
  error = TRUE,
  highlight = TRUE,
  message = FALSE,
  prompt = FALSE,
  tidy = FALSE,
  warning = FALSE,
  echo = TRUE,
  fig.height = 4,
  results = "asis")

# set seed for reproducibility
set.seed(1234567890L)
```

```{r sanitize_datatable}
sanitize_datatable <- function(df, ...) {
  # remove dashes which cause wrapping
  datatable(df, ...,
    rownames = gsub("-", "_", rownames(df)),
    colnames = gsub("-", "_", colnames(df))
  ) %>%
    formatRound(columns = colnames(df)[-1], digits = 3)
}
```

# Overview

-   Project: `r project`
-   PI: `r PI`
-   Analyst: `r analyst`
-   Experiment: `r experiment`
-   Aim: `r aim`

```{r load_metadata}
# load metadata
metadata <- read.csv(metadata)

# Validate factor_of_interest_1
if (is.null(factor_of_interest_1) || !factor_of_interest_1 %in% colnames(metadata)) {
  stop("Error: 'factor_of_interest_1' must be a non-null column name in metadata.")
}

# Validate factor_of_interest_1_levels
if (is.null(factor_of_interest_1_levels) || !is.vector(factor_of_interest_1_levels)) {
  stop("Error: 'factor_of_interest_1_levels' must be a non-null vector.")
}

# Apply factor transformation for factor_of_interest_1
metadata[[factor_of_interest_1]] <- factor(metadata[[factor_of_interest_1]],
  levels = factor_of_interest_1_levels
)

# Validate and apply factor_of_interest_2 only if it's not null
if (!is.null(factor_of_interest_2)) {
  if (!factor_of_interest_2 %in% colnames(metadata)) {
    stop("Error: 'factor_of_interest_2' is not a column in metadata.")
  }
  if (is.null(factor_of_interest_2_levels) || !is.vector(factor_of_interest_2_levels)) {
    stop("Error: 'factor_of_interest_2_levels' must be a non-null vector if 'factor_of_interest_2' is set.")
  }

  metadata[[factor_of_interest_2]] <- factor(metadata[[factor_of_interest_2]],
    levels = factor_of_interest_2_levels
  )
}
```

```{r load_gene_expression}
# load gene expression matrix as data frame
df_counts <- read.table(input_counts,
  sep = "\t",
  row.names = 1, header = TRUE, check.names = FALSE
)
df_tpm <- read.table(input_tpm,
  sep = "\t",
  row.names = 1, header = TRUE, check.names = FALSE
)
```

```{r convert_gene_names_human}
ensembl_human <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
genenames_human <- getBM(
  values = gsub("\\..*", "", rownames(df_counts), perl = T), # vector of gene IDs (same for "counts" and "tpm")
  filters = "ensembl_gene_id", # type of gene ID we are using
  attributes = c(
    "ensembl_gene_id", # attributes we want to retrieve
    "hgnc_symbol"
  ),
  mart = ensembl_human
) # mart we are using (defined above)

# convert from human Ensembl ID (ENSG) to HGNC ID (gene symbol)
convert_gene_names_human_ensembl_to_HGNC <- function(df) {
  # convert gene names to HGNC
  df_clean <- df %>%
    rownames_to_column(var = "ensembl_gene_id") %>%
    mutate(ensembl_gene_id = gsub("\\..*", "", ensembl_gene_id, perl = T)) %>%
    # remove existing rownames
    as_tibble() %>%
    # add HGNC gene symbols
    left_join(genenames_human, by = "ensembl_gene_id") %>%
    # remove Ensembl gene IDs
    dplyr::select(-ensembl_gene_id) %>%
    # keep only distinct rows
    distinct() %>%
    # drop any rows where we now don't have gene symbols
    subset(!is.na(hgnc_symbol) & hgnc_symbol != "")

  # combine any rows where multiple human Ensembl IDs map to the same gene symbol
  df_clean <- df_clean %>%
    group_by(hgnc_symbol) %>%
    summarize(across(starts_with(c("SRX")), sum))

  # turn HGNC symbols back into rownames
  df_clean <- df_clean %>% column_to_rownames("hgnc_symbol")

  return(df_clean)
}

# convert from human Ensembl ID to human HGNC symbol
df_counts_human <- convert_gene_names_human_ensembl_to_HGNC(df_counts)
df_tpm_human <- convert_gene_names_human_ensembl_to_HGNC(df_tpm)
```

```{r function_graph_results}
# This function is updated to handle cases where factor_of_interest_2 is NULL.
graph_deconvolution_results <- function(res, method) {
  # reshape data to one row per sample per cell type
  res_long <- res %>%
    gather(sample, score, -cell_type) %>%
    # add metadata columns
    left_join(metadata, by = "sample")

  # Only create comparison graphs if a second factor of interest is provided
  if (!is.null(factor_of_interest_2)) {
    cat("### Graph by comparison\n")

    # graph subsets by factor_of_interest_1
    for (i in 1:length(factor_of_interest_1_levels)) {
      print(
        res_long %>% filter(.data[[factor_of_interest_1]] == factor_of_interest_1_levels[i]) %>%
          ggplot(aes(x = .data[[factor_of_interest_2]], y = score, color = cell_type)) +
          geom_point(size = 4) +
          ggtitle(paste0(method, ": Immune cell deconvolution in ", factor_of_interest_1_levels[i])) +
          facet_wrap(~cell_type, scales = "free", ncol = 3) +
          scale_color_discrete(guide = "none") +
          theme_bw() +
          theme(axis.text.x = element_text(vjust = 0.5))
      )
    }

    # graph subsets by factor_of_interest_2
    # this loop won't run if factor_of_interest_2_levels is NULL, but it's cleaner inside the if block
    for (i in 1:length(factor_of_interest_2_levels)) {
      print(
        res_long %>% filter(.data[[factor_of_interest_2]] == factor_of_interest_2_levels[i]) %>%
          ggplot(aes(x = .data[[factor_of_interest_1]], y = score, color = cell_type)) +
          geom_point(size = 4) +
          ggtitle(paste0(method, ": Immune cell deconvolution in ", factor_of_interest_2_levels[i])) +
          facet_wrap(~cell_type, scales = "free", ncol = 3) +
          scale_color_discrete(guide = "none") +
          theme_bw() +
          theme(axis.text.x = element_text(vjust = 0.5))
      )
    }
  }

  # cat("\n\n### Graph summary\n\n")
  #
  cat("We can also summarize these graphs as a boxplot, while removing any cell types not present in this analysis:\n")

  # remove cell types that have 0 expression in this analysis
  res_clean <- res[rowSums(res[, -1]) != 0, ]

  # reshape data to one row per sample per cell type
  res_long <- res_clean %>%
    gather(sample, score, -cell_type) %>%
    left_join(metadata, by = "sample")

  # boxplot
  p <- res_long %>%
    ggplot(aes(x = .data[[factor_of_interest_1]], y = score))

  # Conditionally add the second factor for color
  if (!is.null(factor_of_interest_2)) {
    p <- p + aes(color = .data[[factor_of_interest_2]])
  }

  p <- p +
    geom_boxplot() +
    # geom_point(size = 4) +
    ggtitle(paste0(method, ": Immune cell deconvolution")) +
    facet_wrap(~cell_type, scales = "free", ncol = 3) +
    # scale_color_discrete(guide = "none") +
    theme_bw()

  print(p)
}
```


# Immune deconvolution using human genes

```{r describe_human}
#| echo: FALSE
cat("When using human HGNC gene symbols, we have a total of", nrow(df_counts_human), "genes available to test.")
cat(
  "\n\nThe following methods are currently available for human data:",
  paste(names(deconvolution_methods), collapse = ", ")
)
```

## CIBERSORT

CIBERSORT is a human data-based method using **`r nrow(df_counts_human)` genes**.

Unlike all the other modules, which were run in R in this report, CIBERSORT was run using [the online portal](https://cibersortx.stanford.edu/runcibersortx.php) due to its unique licensing agreement. The following parameters were used:

- Job type: Impute Cell Fractions
- Signature matrix file: LM22.update-gene-symbols.txt (22 immune cell types, built-in reference)
- Mixture file: df_tpm_human_for_CIBERSORT.tsv
- Batch correction: disabled
- Disable quantile normalization: true
  - *Disabling is recommended for RNA-Seq data*
- Run mode (relative or absolute): absolute
  - *Description: "Absolute mode scales relative cellular fractions into a score that reflects the absolute proportion of each cell type in a mixture. Although not currently expressed as a fraction, the absolute score can be directly compared across cell types (i.e., relative differences between cell types are maintained) and the default output (relative fractions) can be easily re-derived by normalizing the absolute scores to 1."*
- Permutations: 100

CIBERSORT-abs provides cell-type scores for each sample in units that are **comparable between both samples and cell-types**.

```{r}
eval_cibersort <- file.exists("results/human_CIBERSORT_web.csv")
```


```{r cibersort}
#| fig-width: 10
#| fig-height: 16
#| eval: !expr eval_cibersort
# load results from web portal

res_cibersort <- read.csv("results/human_CIBERSORT_web.csv", header = TRUE)

# these results have columns = celltypes and rows = samples, which is reversed
res_cibersort <- res_cibersort %>%
  column_to_rownames("Mixture") %>%
  t() %>%
  as.data.frame() %>%
  rownames_to_column(var = "cell_type")

# remove extra data that is not scores per sample / cell type
res_cibersort <- subset(res_cibersort, !(cell_type %in% c(
  "P.value",
  "Correlation",
  "RMSE",
  "Absolute.score..sig.score."
)))

# clean up cell type names
res_cibersort$cell_type <- gsub("\\.", " ", res_cibersort$cell_type) # replace . with space
res_cibersort$cell_type <- gsub("  ", " ", res_cibersort$cell_type) # replace two spaces with single space

res_cibersort %>% sanitize_datatable()

graph_deconvolution_results(res_cibersort, "CIBERSORT-abs")
```


## TIMER (Tumor IMmune Estimation Resource)

TIMER is a human data-based method using **`r nrow(df_counts_human)` genes**.

TIMER provides cell-type scores for each sample in arbitrary units that are **comparable between samples** but not between cell-types.


```{r timer}
#| fig-width: 10
#| fig-height: 4
if (file.exists("results/human_TIMER.csv")) {
  res_timer <- read.csv("results/human_TIMER.csv")
} else {
  # TPM normalized is preferred input
  # requires additional parameter "indications": cancer type
  res_timer <- immunedeconv::deconvolute(df_tpm_human, "timer",
    indications = rep(tolower(cancer_type), ncol(df_tpm_human))
  )
  # save results
  write.csv(res_timer, file = "results/human_TIMER.csv", quote = FALSE, row.names = FALSE)
}

res_timer %>% sanitize_datatable()

graph_deconvolution_results(res_timer, "TIMER")
```


## quanTIseq

quanTIseq is a human data-based method using **`r nrow(df_counts_human)` genes**.

quanTIseq provides cell-type scores for each sample in absolute units that are **comparable between both samples and cell-types** and **can be interpreted as a cell fraction**.


```{r quantiseq}
#| fig-width: 10
#| fig-height: 8
if (file.exists("results/human_quanTIseq.csv")) {
  res_quant <- read.csv("results/human_quanTIseq.csv")
} else {
  # TPM normalized is preferred input
  res_quant <- immunedeconv::deconvolute(df_tpm_human, "quantiseq",
    tumor = FALSE, arrays = FALSE
  )
  # save results
  write.csv(res_quant, file = "results/human_quanTIseq.csv", quote = FALSE, row.names = FALSE)
}

res_quant %>% sanitize_datatable()

graph_deconvolution_results(res_quant, "quanTIseq")
```


## EPIC

EPIC is a human data-based method using **`r nrow(df_counts_human)` genes**.

EPIC provides cell-type scores for each sample in absolute units that are **comparable between both samples and cell-types** and **can be interpreted as a cell fraction**.


```{r epic}
#| fig-width: 10
#| fig-height: 6
if (file.exists("results/human_EPIC.csv")) {
  res_epic <- read.csv("results/human_EPIC.csv")
} else {
  # TPM normalized is preferred input
  # requires additional parameter "tumor": tumor data T/F
  res_epic <- immunedeconv::deconvolute(df_tpm_human, "epic",
    tumor = FALSE
  )
  # save results
  write.csv(res_epic, file = "results/human_EPIC.csv", quote = FALSE, row.names = FALSE)
}

res_epic %>% sanitize_datatable()

graph_deconvolution_results(res_epic, "EPIC")
```


## MCPcounter

MCPcounter is a human data-based method (related to the mouse method mMCPcounter) using **`r nrow(df_counts_human)` genes**.

MCPcounter provides cell-type scores for each sample in arbitrary units that are **comparable between samples** but not between cell-types.


```{r mcp_counter}
#| fig-width: 10
#| fig-height: 8
#| results: 'asis'
if (file.exists("results/human_MCPcounter.csv")) {
  res_mcp <- read.csv("results/human_MCPcounter.csv")
} else {
  # TPM normalized is preferred input
  res_mcp <- immunedeconv::deconvolute(df_tpm_human, "mcp_counter")
  # save results
  write.csv(res_mcp, file = "results/human_MCPcounter.csv", quote = FALSE, row.names = FALSE)
}

res_mcp %>% sanitize_datatable()

graph_deconvolution_results(res_mcp, "MCPcounter")
```


# Analysis using a custom gene set

Since MCPcounter (human) is marker-based, we can provide a custom set of genes to perform deconvolution of cell types not included by the above algorithms.

As a reminder, these methods provide cell-type scores for each sample in arbitrary units that are **comparable between samples** but not between cell-types.

## Human data

For **human** data, the input gene list requires at least two columns (see [this example](https://raw.githubusercontent.com/ebecht/MCPcounter/master/Signatures/genes.txt) from the MCPcounter GitHub):

1. **Cell population**, which defines which cell type each gene is a marker for, and
2. one or more of
  a. **HUGO symbols**, the HGNC gene identifier (which should already match the rownames of `df_tpm_human`)
  b. **ENTREZID**
  c. **ENSEMBL ID**

```{r custom human}
# what does their built-in signature look like?
# https://raw.githubusercontent.com/ebecht/MCPcounter/master/Signatures/genes.txt

# load markers
# markers <- read.table("path/to/markers.txt", sep = "\t")
# we are using here as an example marker genes for innate lymphoid cells (ILCs)
markers <- data.frame(
  `Cell population` = rep(c("ILC1", "ILC2", "ILC3"), times = c(5, 7, 6)),
  `HUGO symbols` = c(
    "IL12", "IL15", "IL18", "IFNG", "TNF", # ILC1
    "IL25", "IL33", "TSLP", "IL4", "IL5", "IL13", "AREG", # ILC2
    "IL1B", "IL23", "IL17", "IL22", "LTA", "CSF2"
  )
) # ILC3
colnames(markers) <- c("Cell population", "HUGO symbols")

# check which marker genes are found in the human set
# df_tpm_human[which(rownames(df_tpm_human) %in% markers$`HUGO symbols`),]

# TPM normalized is preferred input
res_mcp_custom <- immunedeconv::deconvolute_mcp_counter(df_tpm_human,
  # add our custom gene set
  genes = markers,
  # specify which gene identifiers we are using
  # options: "HUGO_symbols", "ENTREZ_ID", "ENSEMBL_ID"
  feature_types = "HUGO_symbols"
) %>%
  as.data.frame() %>%
  rownames_to_column("cell_type")

res_mcp_custom %>% sanitize_datatable()

graph_deconvolution_results(res_mcp_custom, "MCPcounter for custom gene set")

# save results
write.csv(res_mcp_custom, file = "results/human_MCPcounter_custom.csv", quote = FALSE)
```

# R session

List and version of tools used for the report generation.

```{r}
#| results: 'markup'
sessionInfo()
```
