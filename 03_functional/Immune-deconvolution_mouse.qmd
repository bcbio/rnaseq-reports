---
title: "Immune Deconvolution"
author: "Harvard Chan Bioinformatics Core"
date: "`r Sys.Date()`"
format:
  html:
    code-fold: true
    code-tools: true
    code-overflow: wrap
    df-print: paged
    highlight-style: pygments
    number-sections: true
    self-contained: true
    theme: default
    toc: true
    toc-location: right
    toc-expand: false
    lightbox: true
params:
  # information about project: project name, PI, analyst, experiment, aim
  project_file: ../information.R
  # paths to raw counts and TPM gene expression matrices and metadata table
  params_file: params_immune_deconv_mouse.R
  # metadata to separate by on plot
  factor_of_interest_1: type
  factor_of_interest_1_levels: !expr c("C57BL/6", "Thbs1KO")
  factor_of_interest_2: null
  factor_of_interest_2_levels: null
  # for TIMER method: which cancer type?
  # run `immunedeconv::timer_available_cancers` to see options
  # or see publication https://doi.org/10.1186/s13059-016-1028-7 for definitions
  cancer_type: coad
---

Template developed with materials from the [Immune deconvolution vignette from immunedeconv](https://omnideconv.org/immunedeconv/articles/immunedeconv.html) and the [Immune infiltration tutorial from DFCI](https://liulab-dfci.github.io/RIMA/Infiltration.html).



::: {.callout-tip title="Bulk RNA sequencing, orthotopic MTO tumor"}

Data fetched from this Bioproject [PRJDB14619](https://www.ncbi.nlm.nih.gov/Traces/study/?acc=PRJDB14619&o=acc_s%3Aa&s=DRR414031,DRR414032,DRR414033,DRR414034,DRR414035,DRR414036).

Description: Bulk RNA sequencing of orthotopic primary tumor of MTO organoid implanted to the rectum of WT or Thbs1KO mice 8 weeks after inocculation. The effect of stromal THBS1 loss in aggressive murine colon cancer can be analyzed.
:::


```{r check_wd_and_version}
# this sets up the working directory to this file so all files can be found
suppressWarnings(library(rstudioapi))
# NOTE: this code will check version, this is our recommendation, it may work with other versions
stopifnot(R.version$major >= 4) # requires R4
if (compareVersion(R.version$minor, "3.1") < 0) warning("We recommend >= R4.3.1")
stopifnot(compareVersion(as.character(BiocManager::version()), "3.18") >= 0)
```

This code is in this ![](https://img.shields.io/badge/status-draft-grey) revision.

```{r load_params}
#| cache: FALSE

invisible(list2env(params, environment()))
source(params_file)
source(project_file)
```

```{r load_libraries}
#| cache: FALSE
#| message: FALSE
#| warning: FALSE
library(tidyverse)
library(knitr)
# BiocManager::install('grimbough/biomaRt')
library(biomaRt)
# remotes::install_github("omnideconv/immunedeconv")
library(immunedeconv)

opts_chunk[["set"]](
  cache = FALSE,
  cache.lazy = FALSE,
  dev = c("png", "pdf"),
  error = TRUE,
  highlight = TRUE,
  message = FALSE,
  prompt = FALSE,
  tidy = FALSE,
  warning = FALSE,
  echo = TRUE,
  fig.height = 4,
  results = "asis")

# set seed for reproducibility
set.seed(1234567890L)
```

```{r sanitize_datatable}
sanitize_datatable <- function(df, ...) {
  # remove dashes which cause wrapping
  datatable(df, ...,
    rownames = gsub("-", "_", rownames(df)),
    colnames = gsub("-", "_", colnames(df))
  ) %>%
  formatRound(columns=colnames(df)[-1], digits=3)
}
```

# Overview

-   Project: `r project`
-   PI: `r PI`
-   Analyst: `r analyst`
-   Experiment: `r experiment`
-   Aim: `r aim`

```{r load_metadata}
# load metadata
metadata <- read.csv(metadata)
# ensure sample names match between metadata and expression data
# by removing the first two characters from the sample names in metadata
if ("sample" %in% colnames(metadata)) {
  sample_prefix <- substring(metadata$sample[1],1,3)
} else {
  warning("Column 'sample' not found in metadata. Skipping sample name adjustment.")
}
# Validate factor_of_interest_1
if (is.null(factor_of_interest_1) || !factor_of_interest_1 %in% colnames(metadata)) {
  stop("Error: 'factor_of_interest_1' must be a non-null column name in metadata.")
}

# Validate factor_of_interest_1_levels
if (is.null(factor_of_interest_1_levels) || !is.vector(factor_of_interest_1_levels)) {
  stop("Error: 'factor_of_interest_1_levels' must be a non-null vector.")
}

# Apply factor transformation for factor_of_interest_1
metadata[[factor_of_interest_1]] <- factor(metadata[[factor_of_interest_1]],
                                           levels = factor_of_interest_1_levels)

# Validate and apply factor_of_interest_2 only if it's not null
if (!is.null(factor_of_interest_2)) {
  if (!factor_of_interest_2 %in% colnames(metadata)) {
    stop("Error: 'factor_of_interest_2' is not a column in metadata.")
  }
  if (is.null(factor_of_interest_2_levels) || !is.vector(factor_of_interest_2_levels)) {
    stop("Error: 'factor_of_interest_2_levels' must be a non-null vector if 'factor_of_interest_2' is set.")
  }
  
  metadata[[factor_of_interest_2]] <- factor(metadata[[factor_of_interest_2]],
                                             levels = factor_of_interest_2_levels)
}
```

```{r load_gene_expression}
# load gene expression matrix as data frame
df_counts <- read.table(input_counts, sep = "\t", 
                        row.names = 1, header = TRUE, check.names = FALSE)
df_tpm <- read.table(input_tpm, sep = "\t", 
                     row.names = 1, header = TRUE, check.names = FALSE)
```

```{r}
convert_id <- !"gene_name" %in% colnames(df_counts)
```


```{r convert_gene_names_mouse}
#| eval: !expr convert_id
ensembl_mouse <- useEnsembl(biomart = "genes", dataset = "mmusculus_gene_ensembl")
genenames_mouse <- getBM(
  values = rownames(df_counts), # vector of gene IDs (same for "counts" and "tpm")
  filters = "ensembl_gene_id", # type of gene ID we are using
  attributes = c(
    "ensembl_gene_id", # attributes we want to retrieve
    "mgi_symbol"
  ),
  mart = ensembl_mouse
) # mart we are using (defined above)

# convert from mouse Ensembl ID (ENMUSG) to MGI ID (gene symbol)
convert_gene_names_mouse_ensembl_to_MGI <- function(df) {
  # convert gene names to MGI
  df_clean <- df %>% rownames_to_column(var = "ensembl_gene_id") %>%
    # remove existing rownames
    as_tibble() %>%
    # add MGI gene symbols
    left_join(genenames_mouse, by = "ensembl_gene_id") %>%
    # remove Ensembl gene IDs
    dplyr::select(-ensembl_gene_id) %>%
    # keep only distinct rows
    distinct() %>%
    # drop any rows where we now don't have gene symbols
    subset(!is.na(mgi_symbol) & mgi_symbol != "")

  # combine any rows where multiple mouse Ensembl IDs map to the same gene symbol
  df_clean <- df_clean %>%
    group_by(mgi_symbol) %>%
    summarize(across(starts_with(c("Duo", "Ile")), sum))

  # turn MGI symbols back into rownames
  df_clean <- df_clean %>% column_to_rownames("mgi_symbol")

  return(df_clean)
}

# convert from mouse Ensembl ID to mouse MGI symbol
df_counts_mouse <- convert_gene_names_mouse_ensembl_to_MGI(df_counts)
df_tpm_mouse <- convert_gene_names_mouse_ensembl_to_MGI(df_tpm)

```



```{r}
#| eval: !expr "!convert_id"
genenames_mouse <- data.frame(
  ensembl_gene_id = rownames(df_counts),
  mgi_symbol = df_counts$gene_name
)

df_counts_mouse <- df_counts %>%
  # rename column for consistency
  dplyr::rename(mgi_symbol = gene_name) %>%
  # combine any rows where multiple mouse Ensembl IDs map to the same gene symbol
  group_by(mgi_symbol) %>%
  summarize(across(starts_with(sample_prefix), sum)) %>%
  # change rownames from Ensembl ID to gene name
  remove_rownames() %>%
  column_to_rownames("mgi_symbol")
df_tpm_mouse <- df_tpm %>%
  # add gene symbols
  rownames_to_column("ensembl_gene_id") %>%
  left_join(genenames_mouse, by = "ensembl_gene_id") %>%
  dplyr::select(-ensembl_gene_id) %>%
  # combine any rows where multiple mouse Ensembl IDs map to the same gene symbol
  group_by(mgi_symbol) %>%
  summarize(across(starts_with(sample_prefix), sum)) %>%
  # make gene name new rownames
  column_to_rownames("mgi_symbol")
  
system("mkdir -p gene_expression_converted_symbols")
write.table(df_counts_mouse, "gene_expression_converted_symbols/df_counts_mouse.tsv",
  quote = FALSE, sep = "\t", row.names = TRUE
)
write.table(df_tpm_mouse, "gene_expression_converted_symbols/df_tpm_mouse.tsv",
  quote = FALSE, sep = "\t", row.names = TRUE
)
```

```{r function_graph_results}
graph_deconvolution_results <- function(res, method) {
  # reshape data to one row per sample per cell type
  res_long <- res %>%
    gather(sample, score, -cell_type) %>%
    # add metadata columns
    left_join(metadata, by = "sample")

  # Only create comparison graphs if a second factor of interest is provided
  if (!is.null(factor_of_interest_2)) {
    cat("### Graph by comparison\n")

    # graph subsets by factor_of_interest_1
    for (i in 1:length(factor_of_interest_1_levels)) {
      print(
        res_long %>% filter(.data[[factor_of_interest_1]] == factor_of_interest_1_levels[i]) %>%
          ggplot(aes(x = .data[[factor_of_interest_2]], y = score, color = cell_type)) +
          geom_point(size = 4) +
          ggtitle(paste0(method, ": Immune cell deconvolution in ", factor_of_interest_1_levels[i])) +
          facet_wrap(~cell_type, scales = "free", ncol = 3) +
          scale_color_discrete(guide = "none") +
          theme_bw() +
          theme(axis.text.x = element_text(vjust = 0.5))
      )
    }

    # graph subsets by factor_of_interest_2
    # this loop won't run if factor_of_interest_2_levels is NULL, but it's cleaner inside the if block
    for (i in 1:length(factor_of_interest_2_levels)) {
      print(
        res_long %>% filter(.data[[factor_of_interest_2]] == factor_of_interest_2_levels[i]) %>%
          ggplot(aes(x = .data[[factor_of_interest_1]], y = score, color = cell_type)) +
          geom_point(size = 4) +
          ggtitle(paste0(method, ": Immune cell deconvolution in ", factor_of_interest_2_levels[i])) +
          facet_wrap(~cell_type, scales = "free", ncol = 3) +
          scale_color_discrete(guide = "none") +
          theme_bw() +
          theme(axis.text.x = element_text(vjust = 0.5))
      )
    }
  }

  # cat("\n\n### Graph summary\n\n")
  # 
  cat("We can also summarize these graphs as a boxplot, while removing any cell types not present in this analysis:\n")

  # remove cell types that have 0 expression in this analysis
  res_clean <- res[rowSums(res[, -1]) != 0, ]

  # reshape data to one row per sample per cell type
  res_long <- res_clean %>%
    gather(sample, score, -cell_type) %>%
    left_join(metadata, by = "sample")

  # boxplot
  p <- res_long %>%
      ggplot(aes(x = .data[[factor_of_interest_1]], y = score))

  # Conditionally add the second factor for color
  if (!is.null(factor_of_interest_2)) {
    p <- p + aes(color = .data[[factor_of_interest_2]])
  }
 
  p <- p +
      geom_boxplot() +
      # geom_point(size = 4) +
      ggtitle(paste0(method, ": Immune cell deconvolution")) +
      facet_wrap(~cell_type, scales = "free", ncol = 3) +
      # scale_color_discrete(guide = "none") +
      theme_bw()

  print(p)
}
```


## mMCPcounter

mMCPcounter is a mouse data-based method (related to the human method MCPcounter) using **`r nrow(df_counts_mouse)` genes**.

mMCPcounter provides cell-type scores for each sample in arbitrary units that are **comparable between samples** but not between cell-types.


```{r mmcp_counter}
#| fig-width: 10
#| fig-height: 10
if (file.exists("results/mouse_mMCPcounter.csv")) {
  res_mmcp <- read.csv("results/mouse_mMCPcounter.csv")
} else {
  # TPM normalized is preferred input
  res_mmcp <- immunedeconv::deconvolute_mouse(df_tpm_mouse, "mmcp_counter")
  # save results
  write.csv(res_mmcp, file = "results/mouse_mMCPcounter.csv", quote = FALSE, row.names = FALSE)
}

res_mmcp %>% sanitize_datatable()

graph_deconvolution_results(res_mmcp, "mMCPcounter")
```


## SeqImmuCC

SeqImmuCC is a mouse data-based method using **`r nrow(df_counts_mouse)` genes**.

SeqImmuCC provides cell-type scores for each sample in units that are **comparable between both samples and cell-types**.


```{r seqimmucc}
#| fig-width: 10
#| fig-height: 8
if (file.exists("results/mouse_SeqImmuCC.csv")) {
  res_seqimmucc <- read.csv("results/mouse_SeqImmuCC.csv")
} else {
  # raw counts is preferred input
  # requires additional parameter "algorithm": 'SVR' for CIBERSORT or 'LLSR' for least squares regression
  res_seqimmucc <- immunedeconv::deconvolute_mouse(df_counts_mouse, "seqimmucc", algorithm = "LLSR")
  # save results
  write.csv(res_seqimmucc, file = "results/mouse_SeqImmuCC.csv", quote = FALSE, row.names = FALSE)
}

res_seqimmucc %>% sanitize_datatable()

graph_deconvolution_results(res_seqimmucc, "SeqImmuCC")
```


## DCQ

DCQ is a mouse data-based method using **`r nrow(df_counts_mouse)` genes**.

DCQ provides cell-type scores for each sample in arbitrary units that are **comparable between cell-types** but not between samples.


```{r dcq}
#| fig-width: 10
#| fig-height: 12
if (file.exists("results/mouse_DCQ.csv")) {
  res_dcq <- read.csv("results/mouse_DCQ.csv")
} else {
  # TPM normalized is preferred input
  res_dcq <- immunedeconv::deconvolute_mouse(df_tpm_mouse, "dcq")
  # save results
  write.csv(res_dcq, file = "results/mouse_DCQ.csv", quote = FALSE, row.names = FALSE)
}

res_dcq %>% sanitize_datatable()

graph_deconvolution_results(res_dcq, "DCQ")
```


## BASE

BASE is a mouse data-based method using **`r nrow(df_counts_mouse)` genes**.

BASE provides cell-type scores for each sample in arbitrary units that are **comparable between samples** but not between cell-types.


```{r base}
#| fig-width: 10
#| fig-height: 10
if (file.exists("results/mouse_BASE.csv")) {
  res_base <- read.csv("results/mouse_BASE.csv")
} else {
  # TPM normalized is preferred input
  res_base <- immunedeconv::deconvolute_mouse(df_tpm_mouse, "base")
  # save results
  write.csv(res_base, file = "results/mouse_BASE.csv", quote = FALSE, row.names = FALSE)
}

res_base %>% sanitize_datatable()

graph_deconvolution_results(res_base, "BASE")
```



# Analysis using a custom gene set

Since MCPcounter (human) and mMCPcounter (mouse) are marker-based, we can provide a custom set of genes to perform deconvolution of cell types not included by the above algorithms.

As a reminder, these methods provide cell-type scores for each sample in arbitrary units that are **comparable between samples** but not between cell-types.

## Mouse data

For **mouse** data, the input gene list requires at least two columns:

1. **Denomination**, which defines which cell type each gene is a marker for, and
2. one or more of
  a. **Gene.Symbol**, the MGI gene identifier (which should already match the rownames of `df_tpm_mouse`)
  b. **ENSEMBL.ID**

```{r custom mouse}
# what does their built-in signature look like?
# data("mMCPcounter_signatures_GCRm39", envir = sys.frame(sys.nframe()), package = "mMCPcounter")

# load markers
# markers <- read.table("path/to/markers.txt", sep = "\t")
# we are using here as an example marker genes for innate lymphoid cells (ILCs)
markers <- data.frame(
  Denomination = rep(c("ILC1", "ILC2", "ILC3"),
    times = c(6, 7, 7)
  ),
  Gene.Symbol = c(
    "Il12a", "Il12b", "Il15", "Il18", "Ifng", "Tnf", # ILC1
    "Il25", "Il33", "Tslp", "Il4", "Il5", "Il13", "Areg", # ILC2
    "Il1b", "Il23a", "Il17a", "Il22", "Il22b", "Lta", "Csf2"
  )
) # ILC3

# check which marker genes are found in the mouse set
# df_tpm_mouse[which(rownames(df_tpm_mouse) %in% markers$Gene.Symbol),]

# specify which gene identifiers we are using
# options: "Gene.Symbol", "ENSEMBL.ID"
features <- "Gene.Symbol"

# run mMCPcounter by hand
# code adapted from: https://github.com/cit-bioinfo/mMCP-counter/blob/master/R/mMCP-counter.R
median.na <- function(x) {
  return(median(x, na.rm = TRUE))
}
cit.dfAggregate <- function(data, partition, MARGIN = 1, fAggreg = median.na) {
  cMARGIN <- setdiff(c(1, 2), MARGIN)
  n <- length(partition)
  N <- dim(data)[MARGIN]
  p <- dim(data)[cMARGIN]
  if (n != N) {
    stop("ERROR - cit.dfAggregate : size of partition doesn't correspond to data dimension")
  }
  l <- split(1:N, partition)
  d <- data
  if (MARGIN == 2) {
    d <- t(data)
  }
  d <- matrix(
    sapply(
      l,
      function(i) {
        if (length(i) == 1) {
          unlist(d[i, ])
        } else {
          apply(d[i, ], 2, fAggreg)
        }
      }
    ),
    ncol = p, byrow = TRUE
  )
  d <- as.data.frame(d)
  rownames(d) <- names(l)
  names(d) <- dimnames(data)[[cMARGIN]]
  if (MARGIN == 2) {
    d <- as.data.frame(t(d))
  }
  d
}
foundGenes <- intersect(markers[, features], rownames(df_tpm_mouse))
if (length(foundGenes) == 0) {
  stop("No signature found in input row names. Please ensure the features are accurately set.")
}
absentSignatures <- setdiff(
  unique(markers$Denomination),
  unique(markers[
    markers[, features] %in% rownames(df_tpm_mouse),
    "Denomination"
  ])
)
if (length(absentSignatures) > 0) {
  warning(paste("No genes were found for population(s): ", paste(absentSignatures, collapse = ", "),
    ". Please ensure the genomeVersion argument is correct.",
    sep = ""
  ))
}
localSig <- markers[markers[, features] %in% foundGenes, ]
res_mmcp_custom <- df_tpm_mouse[localSig[, features], ]
res_mmcp_custom <- cit.dfAggregate(res_mmcp_custom,
  localSig$Denomination,
  fAggreg = median.na
)
res_mmcp_custom <- res_mmcp_custom[apply(
  res_mmcp_custom, 1,
  function(x) {
    sum(is.na(x))
  }
) < ncol(res_mmcp_custom), ]

res_mmcp_custom <- res_mmcp_custom %>%
  as.data.frame() %>%
  rownames_to_column("cell_type")

res_mmcp_custom %>% DT::datatable()

graph_deconvolution_results(res_mmcp_custom, "mMCPcounter for custom gene set")

# save results
write.csv(res_mmcp_custom, file = "results/mouse_mMCPcounter_custom.csv", quote = FALSE)
```

# R session

List and version of tools used for the report generation.

```{r}
#| results: 'markup'
sessionInfo()
```